// ----------------------------------------------------------------------
void plotHpt::loadFiles(string afiles) {
  
  string files = fDirectory + "/" + afiles;
  cout << "==> Loading files listed in " << files << endl;

  // -- mH = 125.0, from https://twiki.cern.ch/twiki/bin/view/LHCPhysics/CERNYellowReportPageBR3
  //  fBF["H2GammaGamma"] = 2.28E-03;

  char buffer[1000];
  ifstream is(files.c_str());
  while (is.getline(buffer, 1000, '\n')) {
    if (buffer[0] == '#') {continue;}
    if (buffer[0] == '/') {continue;}
    
    string sbuffer = string(buffer); 

    string::size_type m1 = sbuffer.find("xsec="); 
    string stype = sbuffer.substr(5, m1-6); 
    cleanupString(stype); 

    string::size_type m2 = sbuffer.find("file="); 
    string sxsec = sbuffer.substr(m1+5, m2-m1-6); 
    string sfile = sbuffer.substr(m2+5); 
    string sname, sdecay; 

    TFile *pF(0); 
    if (string::npos != stype.find("data")) {
      // -- DATA
      cout << "XXXX do not know what to do with data?!" << endl;
    } else {
      // -- MC
      pF = loadFile(sfile); 
      TTree *t = (TTree*)pF->Get("events"); 
      int nevt = t->GetEntries();
      if (string::npos != stype.find("mcatnlo")) {
	dataset *ds = new dataset(); 
	if (stype.substr(stype.length()-1) == "0") {
	  sname = stype.substr(stype.rfind(",") + 1);
	  cleanupString(sname); 
	  sdecay = "m_{t}=173.5GeV";
	  ds->fColor = kBlue; 
	  ds->fLcolor = kBlue; 
	  ds->fFcolor = kBlue; 
	  ds->fSymbol = 24; 
	  ds->fFillStyle = 3305; 
	} else if (stype.substr(stype.length()-1) == "1") {
	  sname = stype.substr(stype.rfind(",") + 1);
	  cleanupString(sname); 
	  sdecay = "blurp";
	  ds->fColor = kBlue+2; 
	  ds->fLcolor = kBlue+2; 
	  ds->fFcolor = kBlue+2; 
	  ds->fSymbol = 25; 
	  ds->fFillStyle = 3395; 
	} else if (stype.substr(stype.length()-1) == "5") {
	  sname = stype.substr(stype.rfind(",") + 1);
	  cleanupString(sname); 
	  sdecay = "m_{t}#rightarrow#infty";
	  ds->fColor = kGreen+3; 
	  ds->fLcolor = kGreen+3; 
	  ds->fFcolor = kGreen+3; 
	  ds->fSymbol = 26; 
	  ds->fFillStyle = 3356; 
	} 
	ds->fF = pF; 
	ds->fXsec = atof(sxsec.c_str());
	ds->fBf   = 2.28E-03;
	ds->fLumi = nevt/ds->fXsec/ds->fBf/1000.;
	ds->fName = "MC@NLO " + sdecay; 
	ds->fSize = 1; 
	ds->fWidth = 2; 
	fDS.insert(make_pair(sname, ds)); 
	// -- add additionally the combined datasets derived from 0 and 1: 
	if (string::npos != sname.find("man") && stype.substr(stype.length()-1) == "0") {
	  string combined = sname.substr(0, sname.rfind("0")) + string("x"); 
	  fDS.insert(make_pair(combined, ds)); 
	  cout << "combined: " << combined << endl;
	 }	 
      }


      if (string::npos != stype.find("sherpa")) {
	dataset *ds = new dataset(); 
	sname = "sherpa";
        cleanupString(sname); 
	sdecay = "#gamma #gamma j {j}";
	ds->fColor = kRed; 
	ds->fLcolor = kRed; 
	ds->fFcolor = kRed; 
	ds->fSymbol = 27; 
	ds->fFillStyle = 3365; 
	ds->fSize = 1; 
	ds->fWidth = 2; 
	if (string::npos != stype.find("132")) {
	  sname = "sherpa132"; 
	  cleanupString(sname); 
	  sdecay = "132";
	  ds->fColor = kRed; 
	  ds->fLcolor = kRed; 
	  ds->fFcolor = kRed; 
	  ds->fSymbol = 27; 
	  ds->fFillStyle = 3365; 
	}
	if (string::npos != stype.find("133")) {
	  sname = "sherpa133"; 
	  cleanupString(sname); 
	  sdecay = "133";
	  ds->fColor = kRed+1; 
	  ds->fLcolor = kRed+1; 
	  ds->fFcolor = kRed+1; 
	  ds->fSymbol = 24; 
	  ds->fFillStyle = 3305; 
	}
	if (string::npos != stype.find("134")) {
	  sname = "sherpa134"; 
	  cleanupString(sname); 
	  sdecay = "134";
	  ds->fColor = kRed+2; 
	  ds->fLcolor = kRed+2; 
	  ds->fFcolor = kRed+2; 
	  ds->fSymbol = 25; 
	  ds->fFillStyle = 3395; 
	}
	if (string::npos != stype.find("135")) {
	  sname = "sherpa135"; 
	  cleanupString(sname); 
	  sdecay = "135";
	  ds->fColor = kRed+3; 
	  ds->fLcolor = kRed+3; 
	  ds->fFcolor = kRed+3; 
	  ds->fSymbol = 26; 
	  ds->fFillStyle = 3356; 
	}
	if (string::npos != stype.find("140")) {
	  sname = "sherpa140"; 
	  cleanupString(sname); 
	  sdecay = "140";
	}
	if (string::npos != stype.find("141")) {
	  // against 132 or sherpa
	  sname = "sherpa141"; 
	  cleanupString(sname); 
	  sdecay = "141";
	  ds->fColor = kBlue; 
	  ds->fLcolor = kBlue; 
	  ds->fFcolor = kBlue; 
	  ds->fSymbol = 26; 
	  ds->fFillStyle = 3305; 
	}
	if (string::npos != stype.find("150")) {
	  // against 134
	  sname = "sherpa150"; 
	  cleanupString(sname); 
	  sdecay = "150";
	  ds->fColor = kBlue; 
	  ds->fLcolor = kBlue; 
	  ds->fFcolor = kBlue; 
	  ds->fSymbol = 27; 
	  ds->fFillStyle = 3305; 
	}
	if (string::npos != stype.find("151")) {
	  // against 135
	  sname = "sherpa151"; 
	  cleanupString(sname); 
	  sdecay = "151";
	  ds->fColor = kBlue+1; 
	  ds->fLcolor = kBlue+1; 
	  ds->fFcolor = kBlue+1; 
	  ds->fSymbol = 25; 
	  ds->fFillStyle = 3395; 
	}
	if (string::npos != stype.find("152")) {
	  // against 133
	  sname = "sherpa152"; 
	  cleanupString(sname); 
	  sdecay = "152";
	  ds->fColor = kBlue+2; 
	  ds->fLcolor = kBlue+2; 
	  ds->fFcolor = kBlue+2; 
	  ds->fSymbol = 26; 
	  ds->fFillStyle = 3365; 
	}
	ds->fF = pF; 
	ds->fXsec = atof(sxsec.c_str());
	ds->fBf   = 1.;
	ds->fLumi = nevt/ds->fXsec/ds->fBf/1000.;
	ds->fName = "SHERPA " + sdecay; 
	fDS.insert(make_pair(sname, ds)); 
      } 

      // mb ub nb pb fb 
      cout << "MC "  << sfile  << ", sname=" << sname << /*"(" << stype << */ ", xsec = " << fDS[sname]->fXsec
	   << " eq.lumi = " << fDS[sname]->fLumi << "/fb"
	   << " (Nevts = " << nevt << ")"
	   << endl;

    }
  }
}

